{"version":3,"sources":["expression.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_typeof","Symbol","iterator","obj","constructor","$","$$","_","Mavo","Expression","Class","expression","this","eval","data","oldValue","value","hooks","run","compile","exception","context","ERROR","toString","live","trim","static","serializers","BinaryExpression","node","serialize","left","operator","right","UnaryExpression","argument","CallExpression","callee","arguments","map","join","ConditionalExpression","test","consequent","alternate","MemberExpression","object","property","ArrayExpression","elements","Literal","raw","Identifier","name","ThisExpression","Compound","body","transformations","Functions","operators","type","ret","undefined","rewrite","code","parse","e","Function","self","jsep","lazy","simpleOperation","Object","keys","o","replace","operand","RegExp","addBinaryOp","LogicalExpression","Text","all","path","syntax","reduce","index","childNodes","scope","element","attribute","nodeType","parentNode","children","normalize","getAttribute","textContent","template","tokenize","primitive","Unit","get","computed","set","concat","update","_this","expr","env","presentational","Primitive","formatNumber","datatype","setValue","match","lastIndex","exec","push","substring","proxy","expressionRegex","WeakMap","Expressions","_this2","expressions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","et","err","getSyntax","closest","defaultSyntax","traverse","dependents","Set","active","addEventListener","evt","isDeleted","size","getRelativeData","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","ref","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","exp","extract","slice","split","_this3","is","attributes","forEach","child","emptySyntax","escapeRegExp","Node","prototype","_this4","dirty","null","unhandled","mavo","getData","Proxy","walkUp","properties","add","has","find","item","filter","Error","_this5","requestAnimationFrame","Bliss"],"mappings":"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","file":"mavo.min.js","sourcesContent":["(function($, $$) {\n\nvar _ = Mavo.Expression = $.Class({\n\tconstructor: function(expression) {\n\t\tthis.expression = expression;\n\t},\n\n\teval: function(data) {\n\t\tthis.oldValue = this.value;\n\n\t\t// TODO convert to new Function() which is more optimizable by JS engines.\n\t\t// Also, cache the function, since only data changes across invocations.\n\t\tMavo.hooks.run(\"expression-eval-beforeeval\", this);\n\n\t\ttry {\n\t\t\tif (!this.function) {\n\t\t\t\tthis.function = _.compile(this.expression);\n\t\t\t}\n\n\t\t\tthis.value = this.function(data);\n\t\t}\n\t\tcatch (exception) {\n\t\t\tMavo.hooks.run(\"expression-eval-error\", {context: this, exception});\n\n\t\t\tthis.value = _.ERROR;\n\t\t}\n\n\t\treturn this.value;\n\t},\n\n\ttoString() {\n\t\treturn this.expression;\n\t},\n\n\tlive: {\n\t\texpression: function(value) {\n\t\t\tvar code = value = value.trim();\n\n\t\t\tthis.function = null;\n\t\t}\n\t},\n\n\tstatic: {\n\t\tERROR: \"N/A\",\n\n\t\tserializers: {\n\t\t\t\"BinaryExpression\": node => `${_.serialize(node.left)} ${node.operator} ${_.serialize(node.right)}`,\n\t\t\t\"UnaryExpression\": node => `${node.operator}${_.serialize(node.argument)}`,\n\t\t\t\"CallExpression\": node => `${_.serialize(node.callee)}(${node.arguments.map(_.serialize).join(\", \")})`,\n\t\t\t\"ConditionalExpression\": node => `${_.serialize(node.test)}? ${_.serialize(node.consequent)} : ${_.serialize(node.alternate)}`,\n\t\t\t\"MemberExpression\": node => `${_.serialize(node.object)}[${_.serialize(node.property)}]`,\n\t\t\t\"ArrayExpression\": node => `[${node.elements.map(_.serialize).join(\", \")}]`,\n\t\t\t\"Literal\": node => node.raw,\n\t\t\t\"Identifier\": node => node.name,\n\t\t\t\"ThisExpression\": node => \"this\",\n\t\t\t\"Compound\": node => node.body.map(_.serialize).join(\" \")\n\t\t},\n\n\t\ttransformations: {\n\t\t\t\"BinaryExpression\": node => `${Mavo.Functions.operators[node.operator] || node.operator}(${_.serialize(node.left)}, ${_.serialize(node.right)})`,\n\t\t\t\"CallExpression\": node => {\n\t\t\t\tif (node.callee.type == \"Identifier\" && node.callee.name == \"if\") {\n\t\t\t\t\tnode.callee.name = \"iff\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tserialize: node => {\n\t\t\tif (_.transformations[node.type]) {\n\t\t\t\tvar ret = _.transformations[node.type](node);\n\n\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _.serializers[node.type](node);\n\t\t},\n\n\t\trewrite: function(code) {\n\t\t\ttry {\n\t\t\t\treturn _.serialize(_.parse(code));\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treturn code;\n\t\t\t}\n\t\t},\n\n\t\tcompile: function(code) {\n\t\t\tcode = _.rewrite(code);\n\n\t\t\treturn new Function(\"data\", `with(Mavo.Functions._Trap)\n\t\t\t\t\twith(data) {\n\t\t\t\t\t\treturn ${code};\n\t\t\t\t\t}`);\n\t\t},\n\n\t\tparse: self.jsep,\n\n\t\tlazy: {\n\t\t\tsimpleOperation: function() {\n\t\t\t\tvar operator = Object.keys(Mavo.Functions.operators).map(o => o.replace(/[|*+]/g, \"\\\\$&\")).join(\"|\");\n\t\t\t\tvar operand = \"\\\\s*(\\\\b[\\\\w.]+\\\\b)\\\\s*\";\n\n\t\t\t\treturn RegExp(`(?:^|\\\\()${operand}(${operator})${operand}(?:$|\\\\))`, \"g\");\n\t\t\t}\n\t\t}\n\t}\n});\n\nif (self.jsep) {\n\tjsep.addBinaryOp(\"and\", 2);\n\tjsep.addBinaryOp(\"or\", 2);\n}\n\n_.serializers.LogicalExpression = _.serializers.BinaryExpression;\n_.transformations.LogicalExpression = _.transformations.BinaryExpression;\n\n(function() {\n\nvar _ = Mavo.Expression.Text = $.Class({\n\tconstructor: function(o) {\n\t\tthis.all = o.all; // the Mavo.Expressions object that this belongs to\n\t\tthis.node = o.node;\n\t\tthis.path = o.path;\n\t\tthis.syntax = o.syntax;\n\n\t\tif (!this.node) {\n\t\t\t// No node provided, figure it out from path\n\t\t\tthis.node = this.path.reduce((node, index) => {\n\t\t\t\treturn node.childNodes[index];\n\t\t\t}, this.all.scope.element);\n\t\t}\n\n\t\tthis.element = this.node;\n\n\t\tthis.attribute = o.attribute || null;\n\n\t\tif (this.node.nodeType === 3) {\n\t\t\tthis.element = this.node.parentNode;\n\n\t\t\t// If no element siblings make this.node the element, which is more robust\n\t\t\t// Same if attribute, there are no attributes on a text node!\n\t\t\tif (!this.node.parentNode.children.length || this.attribute) {\n\t\t\t\tthis.node = this.element;\n\t\t\t\tthis.element.normalize();\n\t\t\t}\n\t\t}\n\n\t\tthis.expression = (this.attribute? this.node.getAttribute(this.attribute) : this.node.textContent).trim();\n\t\tthis.template = o.template? o.template.template : this.tokenize(this.expression);\n\n\t\t// Is this a computed property?\n\t\tvar primitive = Mavo.Unit.get(this.element);\n\t\tif (primitive && this.attribute === primitive.attribute) {\n\t\t\tthis.primitive = primitive;\n\t\t\tprimitive.computed = true; // Primitives containing an expression as their value are implicitly computed\n\t\t}\n\n\t\tMavo.hooks.run(\"expressiontext-init-end\", this);\n\n\t\t_.elements.set(this.element, [...(_.elements.get(this.element) || []), this]);\n\t},\n\n\tupdate: function(data) {\n\t\tthis.data = data;\n\n\t\tvar ret = {};\n\n\t\tret.value = this.value = this.template.map(expr => {\n\t\t\tif (expr instanceof Mavo.Expression) {\n\t\t\t\tvar env = {context: this, expr};\n\n\t\t\t\tMavo.hooks.run(\"expressiontext-update-beforeeval\", env);\n\n\t\t\t\tenv.value = env.expr.eval(data);\n\n\t\t\t\tMavo.hooks.run(\"expressiontext-update-aftereval\", env);\n\n\t\t\t\tif (env.value === undefined || env.value === null) {\n\t\t\t\t\t// Don’t print things like \"undefined\" or \"null\"\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\n\t\t\t\treturn env.value;\n\t\t\t}\n\n\t\t\treturn expr;\n\t\t});\n\n\t\tif (!this.attribute) {\n\t\t\t// Separate presentational & actual values only apply when content is variable\n\t\t\tret.presentational = this.value.map(value => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\treturn value.join(\", \");\n\t\t\t\t}\n\n\t\t\t\tif (typeof value == \"number\") {\n\t\t\t\t\treturn Mavo.Primitive.formatNumber(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tret.presentational = ret.presentational.length === 1? ret.presentational[0] : ret.presentational.join(\"\");\n\t\t}\n\n\t\tret.value = ret.value.length === 1? ret.value[0] : ret.value.join(\"\");\n\n\t\tif (this.primitive && this.template.length === 1) {\n\t\t\tif (typeof ret.value === \"number\") {\n\t\t\t\tthis.primitive.datatype = \"number\";\n\t\t\t}\n\t\t\telse if (typeof ret.value === \"boolean\") {\n\t\t\t\tthis.primitive.datatype = \"boolean\";\n\t\t\t}\n\t\t}\n\n\t\tif (ret.presentational === ret.value) {\n\t\t\tret = ret.value;\n\t\t}\n\n\t\tif (this.primitive) {\n\t\t\tthis.primitive.value = ret;\n\t\t}\n\t\telse {\n\t\t\tMavo.Primitive.setValue(this.node, ret, this.attribute, {presentational: ret.presentational});\n\t\t}\n\t},\n\n\ttokenize: function(template) {\n\t\tvar regex = this.syntax;\n\t\tvar match, ret = [], lastIndex = 0;\n\n\t\tthis.syntax.lastIndex = 0;\n\n\t\twhile ((match = this.syntax.exec(template)) !== null) {\n\t\t\t// Literal before the expression\n\t\t\tif (match.index > lastIndex) {\n\t\t\t\tret.push(template.substring(lastIndex, match.index));\n\t\t\t}\n\n\t\t\tlastIndex = this.syntax.lastIndex;\n\n\t\t\tret.push(new Mavo.Expression(match[1]));\n\t\t}\n\n\t\t// Literal at the end\n\t\tif (lastIndex < template.length) {\n\t\t\tret.push(template.substring(lastIndex));\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tproxy: {\n\t\tscope: \"all\",\n\t\texpressionRegex: \"all\"\n\t},\n\n\tstatic: {\n\t\telements: new WeakMap()\n\t}\n});\n\n})();\n\n(function() {\n\nvar _ = Mavo.Expressions = $.Class({\n\tconstructor: function(scope) {\n\t\tif (scope) {\n\t\t\tthis.scope = scope;\n\t\t\tthis.scope.expressions = this;\n\t\t}\n\n\t\tthis.all = []; // all Expression.Text objects in this scope\n\n\t\tMavo.hooks.run(\"expressions-init-start\", this);\n\n\t\tif (this.scope) {\n\t\t\tvar template = this.scope.template;\n\n\t\t\tif (template && template.expressions) {\n\t\t\t\t// We know which expressions we have, don't traverse again\n\t\t\t\tfor (let et of template.expressions.all) {\n\t\t\t\t\tthis.all.push(new Mavo.Expression.Text({\n\t\t\t\t\t\tpath: et.path,\n\t\t\t\t\t\tsyntax: et.syntax,\n\t\t\t\t\t\tattribute: et.attribute,\n\t\t\t\t\t\tall: this,\n\t\t\t\t\t\ttemplate: et\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar syntax = _.getSyntax(this.scope.element.closest(\"[data-expressions]\")) || _.defaultSyntax;\n\t\t\t\tthis.traverse(this.scope.element, undefined, syntax);\n\t\t\t}\n\t\t}\n\n\t\tthis.dependents = new Set();\n\n\t\tthis.active = true;\n\n\t\t// Watch changes and update value\n\t\tthis.scope.element.addEventListener(\"mavo:datachange\", evt => this.update());\n\n\t\tthis.update();\n\t},\n\n\t/**\n\t * Update all expressions in this scope\n\t */\n\tupdate: function callee() {\n\t\tif (!this.active || this.scope.isDeleted() || this.all.length + this.dependents.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar env = { context: this, data: this.scope.getRelativeData() };\n\n\t\tMavo.hooks.run(\"expressions-update-start\", env);\n\n\t\tfor (let ref of this.all) {\n\t\t\tref.update(env.data);\n\t\t}\n\n\t\tfor (let exp of this.dependents) {\n\t\t\texp.update();\n\t\t}\n\t},\n\n\textract: function(node, attribute, path, syntax) {\n\t\tsyntax.lastIndex = 0;\n\n\t\tif (syntax.test(attribute? attribute.value : node.textContent)) {\n\t\t\tthis.all.push(new Mavo.Expression.Text({\n\t\t\t\tnode, syntax,\n\t\t\t\tpath: (path || \"\").slice(1).split(\"/\").map(i => +i),\n\t\t\t\tattribute: attribute && attribute.name,\n\t\t\t\tall: this\n\t\t\t}));\n\t\t}\n\t},\n\n\t// Traverse an element, including attribute nodes, text nodes and all descendants\n\ttraverse: function(node, path = \"\", syntax) {\n\t\tif (node.nodeType === 3 || node.nodeType === 8) { // Text node\n\t\t\t// Leaf node, extract references from content\n\t\t\tthis.extract(node, null, path, syntax);\n\t\t}\n\t\t// Traverse children and attributes as long as this is NOT the root of a child scope\n\t\t// (otherwise, it will be taken care of its own Expressions object)\n\t\telse if (node == this.scope.element || !Mavo.is(\"scope\", node)) {\n\t\t\tsyntax = _.getSyntax(node) || syntax;\n\t\t\t$$(node.attributes).forEach(attribute => this.extract(node, attribute, path, syntax));\n\t\t\t$$(node.childNodes).forEach((child, i) => this.traverse(child, `${path}/${i}`, syntax));\n\t\t}\n\t},\n\n\tstatic: {\n\t\tdefaultSyntax: /\\[([\\S\\s]+?)\\]/gi,\n\t\temptySyntax: /(?!)/,\n\n\t\tgetSyntax: function(element) {\n\t\t\tif (element) {\n\t\t\t\tvar syntax = element.getAttribute(\"data-expressions\");\n\n\t\t\t\tif (syntax) {\n\t\t\t\t\tif (/^\\S+expression\\S+$/i.test(syntax)) {\n\t\t\t\t\t\tsyntax = Mavo.escapeRegExp(syntax).replace(\"expression\", \"([\\\\S\\\\s]+?)\");\n\t\t\t\t\t\tsyntax = RegExp(syntax, \"gi\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn _.emptySyntax; // empty set regex\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t}\n\t}\n});\n\n})();\n\nMavo.Node.prototype.getRelativeData = function(o = { dirty: true, computed: true, null: true }) {\n\to.unhandled = this.mavo.unhandled;\n\tvar ret = this.getData(o);\n\n\tif (self.Proxy && ret && typeof ret === \"object\") {\n\t\tret = new Proxy(ret, {\n\t\t\tget: (data, property) => {\n\t\t\t\tif (property in data) {\n\t\t\t\t\treturn data[property];\n\t\t\t\t}\n\n\t\t\t\tif (property == \"$index\") {\n\t\t\t\t\treturn this.index + 1;\n\t\t\t\t}\n\n\t\t\t\t// Look in ancestors\n\t\t\t\tvar ret = this.walkUp(scope => {\n\t\t\t\t\tif (property in scope.properties) {\n\t\t\t\t\t\t// TODO decouple\n\t\t\t\t\t\tscope.expressions.dependents.add(this.expressions);\n\n\t\t\t\t\t\treturn scope.properties[property].getRelativeData(o);\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thas: (data, property) => {\n\t\t\t\tif (property in data) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Property does not exist, look for it elsewhere\n\t\t\t\tif (property == \"$index\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// First look in ancestors\n\t\t\t\tvar ret = this.walkUp(scope => {\n\t\t\t\t\tif (property in scope.properties) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\t// Still not found, look in descendants\n\t\t\t\tret = this.find(property);\n\n\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\t\tret = ret.map(item => item.getData(o))\n\t\t\t\t\t\t\t\t .filter(item => item !== null);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tret = ret.getData(o);\n\t\t\t\t\t}\n\n\t\t\t\t\tdata[property] = ret;\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset: function(data, property, value) {\n\t\t\t\tthrow Error(\"You can’t set data via expressions.\");\n\t\t\t}\n\t\t});\n\t}\n\n\treturn ret;\n};\n\nMavo.hooks.add(\"scope-init-end\", function() {\n\tnew Mavo.Expressions(this);\n\tthis.expressions.update();\n});\n\nMavo.hooks.add(\"scope-render-start\", function() {\n\tthis.expressions.active = false;\n});\n\nMavo.hooks.add(\"scope-render-end\", function() {\n\trequestAnimationFrame(() => {\n\t\tthis.expressions.active = true;\n\t\tthis.expressions.update();\n\t});\n});\n\n})(Bliss, Bliss.$);\n"],"sourceRoot":"/source/"}