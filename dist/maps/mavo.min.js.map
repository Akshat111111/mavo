{"version":3,"sources":["functions.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Object","TypeError","numbers","array","args","$$","filter","number","isNaN","map","n","_","Mavo","Functions","operators","=","$now","Date","sum","arguments","reduce","prev","current","average","min","Math","apply","max","count","toArray","a","round","num","decimals","isFinite","toLocaleString","useGrouping","maximumFractionDigits","iff","condition","iftrue","iffalse","c","ret","replace","haystack","needle","replacement","iterations","item","needleRegex","RegExp","escapeRegExp","counter","idify","readable","text","toLowerCase","uppercase","str","toUpperCase","lowercase","Script","addUnaryOperator","name","o","operand","scalar","addBinaryOperator","symbol","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","symbols","identity","code","_len","operands","_key","concat","result","logical","_loop","b","slice","getOperatorName","op","not","multiply","divide","add","subtract","lte","_Mavo$Script$getNumer","getNumericalOperands","_Mavo$Script$getNumer2","lt","_Mavo$Script$getNumer3","_Mavo$Script$getNumer4","gte","_Mavo$Script$getNumer5","_Mavo$Script$getNumer6","gt","_Mavo$Script$getNumer7","_Mavo$Script$getNumer8","eq","neq","and","or","p","r","concatenate","da","db","details","aliases","_loop2","_name","split","forEach","alias","_Trap","self","Proxy","get","functions","property","propertyL","hasOwnProperty","has"],"mappings":"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","file":"mavo.min.js","sourcesContent":["/**\n * Functions available inside Mavo expressions\n */\n\n(function() {\n\nvar _ = Mavo.Functions = {\n\toperators: {\n\t\t\"=\": \"eq\"\n\t},\n\n\tget $now() {\n\t\treturn new Date();\n\t},\n\n\t/*********************\n\t * Number functions\n\t *********************/\n\n\t/**\n\t * Aggregate sum\n\t */\n\tsum: function(array) {\n\t\treturn numbers(array, arguments).reduce((prev, current) => {\n\t\t\treturn +prev + (+current || 0);\n\t\t}, 0);\n\t},\n\n\t/**\n\t * Average of an array of numbers\n\t */\n\taverage: function(array) {\n\t\tarray = numbers(array, arguments);\n\n\t\treturn array.length && _.sum(array) / array.length;\n\t},\n\n\t/**\n\t * Min of an array of numbers\n\t */\n\tmin: function(array) {\n\t\treturn Math.min(...numbers(array, arguments));\n\t},\n\n\t/**\n\t * Max of an array of numbers\n\t */\n\tmax: function(array) {\n\t\treturn Math.max(...numbers(array, arguments));\n\t},\n\n\tcount: function(array) {\n\t\treturn Mavo.toArray(array).filter(a => a !== null && a !== false && a !== \"\").length;\n\t},\n\n\tround: function(num, decimals) {\n\t\tif (!num || !decimals || !isFinite(num)) {\n\t\t\treturn Math.round(num);\n\t\t}\n\n\t\treturn +num.toLocaleString(\"en-US\", {\n\t\t\tuseGrouping: false,\n\t\t\tmaximumFractionDigits: decimals\n\t\t});\n\t},\n\n\tiff: function(condition, iftrue, iffalse=\"\") {\n\t\tif (Array.isArray(condition)) {\n\t\t\treturn condition.map((c, i) => {\n\t\t\t\tvar ret = c? iftrue : iffalse;\n\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\treturn ret[Math.min(i, ret.length - 1)];\n\t\t\t\t}\n\n\t\t\t\treturn ret;\n\t\t\t});\n\t\t}\n\n\t\treturn condition? iftrue : iffalse;\n\t},\n\n\t/*********************\n\t * String functions\n\t *********************/\n\n\t/**\n\t * Replace all occurences of a string with another string\n\t */\n\treplace: function(haystack, needle, replacement, iterations = 1) {\n\t\tif (Array.isArray(haystack)) {\n\t\t\treturn haystack.map(item => _.replace(item, needle, replacement));\n\t\t}\n\n\t\t// Simple string replacement\n\t\tvar needleRegex = RegExp(Mavo.escapeRegExp(needle), \"g\");\n\t\tvar ret = haystack, prev;\n\t\tvar counter = 0;\n\n\t\twhile (ret != prev && (counter++ < iterations)) {\n\t\t\tprev = ret; // foo\n\t\t\tret = ret.replace(needleRegex, replacement); // fo\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tidify: readable => ((text || \"\") + \"\")\n\t\t.replace(/\\s+/g, \"-\") // Convert whitespace to hyphens\n\t\t.replace(/[^\\w-]/g, \"\") // Remove weird characters\n\t\t.toLowerCase(),\n\n\tuppercase: str => (str + \"\").toUpperCase(),\n\tlowercase: str => (str + \"\").toLowerCase(),\n};\n\nMavo.Script = {\n\taddUnaryOperator: function(name, o) {\n\t\treturn operand => Array.isArray(operand)? operand.map(o.scalar) : o.scalar(operand);\n\t},\n\n\t/**\n\t * Extend a scalar operator to arrays, or arrays and scalars\n\t * The operation between arrays is applied element-wise.\n\t * The operation operation between a scalar and an array will result in\n\t * the operation being applied between the scalar and every array element.\n\t */\n\taddBinaryOperator: function(name, o) {\n\t\tif (o.symbol) {\n\t\t\t// Build map of symbols to function names for easy rewriting\n\t\t\tfor (let symbol of Mavo.toArray(o.symbol)) {\n\t\t\t\tMavo.Script.symbols[symbol] = name;\n\t\t\t}\n\t\t}\n\n\t\to.identity = o.identity === undefined? 0 : o.identity;\n\n\t\treturn _[name] = o.code || function(...operands) {\n\t\t\tif (operands.length === 1) {\n\t\t\t\tif (Array.isArray(operands[0])) {\n\t\t\t\t\t// Operand is an array of operands, expand it out\n\t\t\t\t\toperands = [...operands[0]];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar prev = o.logical? o.identity : operands[0], result;\n\n\t\t\tfor (let i = 1; i < operands.length; i++) {\n\t\t\t\tlet a = o.logical? operands[i - 1] : prev;\n\t\t\t\tlet b = operands[i];\n\n\t\t\t\tif (Array.isArray(b)) {\n\t\t\t\t\tif (typeof o.identity == \"number\") {\n\t\t\t\t\t\tb = numbers(b);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Array.isArray(a)) {\n\t\t\t\t\t\tresult = [\n\t\t\t\t\t\t\t...b.map((n, i) => o.scalar(a[i] === undefined? o.identity : a[i], n)),\n\t\t\t\t\t\t\t...a.slice(b.length)\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresult = b.map(n => o.scalar(a, n));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Operand is scalar\n\t\t\t\t\tif (typeof o.identity == \"number\") {\n\t\t\t\t\t\tb = +b;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Array.isArray(a)) {\n\t\t\t\t\t\tresult = a.map(n => o.scalar(n, b));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresult = o.scalar(a, b);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (o.reduce) {\n\t\t\t\t\tprev = o.reduce(prev, result, a, b);\n\t\t\t\t}\n\t\t\t\telse if (o.logical) {\n\t\t\t\t\tprev = prev && result;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprev = result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn prev;\n\t\t};\n\t},\n\n\t/**\n\t * Mapping of operator symbols to function name.\n\t * Populated via addOperator() and addLogicalOperator()\n\t */\n\tsymbols: {},\n\n\tgetOperatorName: op => Mavo.Script.symbols[op] || op,\n\n\t/**\n\t * Operations for elements and scalars.\n\t * Operations between arrays happen element-wise.\n\t * Operations between a scalar and an array will result in the operation being performed between the scalar and every array element.\n\t * Ordered by precedence (higher to lower)\n\t * @param scalar {Function} The operation between two scalars\n\t * @param identity The operation’s identity element. Defaults to 0.\n\t */\n\toperators: {\n\t\t\"not\": {\n\t\t\tscalar: a => a => !a\n\t\t},\n\t\t\"multiply\": {\n\t\t\tscalar: (a, b) => a * b,\n\t\t\tidentity: 1,\n\t\t\tsymbol: \"*\"\n\t\t},\n\t\t\"divide\": {\n\t\t\tscalar: (a, b) => a / b,\n\t\t\tidentity: 1,\n\t\t\tsymbol: \"/\"\n\t\t},\n\t\t\"add\": {\n\t\t\tscalar: (a, b) => +a + +b,\n\t\t\tsymbol: \"+\"\n\t\t},\n\t\t\"subtract\": {\n\t\t\tscalar: (a, b) => a - b,\n\t\t\tsymbol: \"-\"\n\t\t},\n\n\t\t\"lte\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => {\n\t\t\t\t[a, b] = Mavo.Script.getNumericalOperands(a, b);\n\t\t\t\treturn a <= b;\n\t\t\t},\n\t\t\tidentity: true,\n\t\t\tsymbol: \"<=\"\n\t\t},\n\t\t\"lt\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => {\n\t\t\t\t[a, b] = Mavo.Script.getNumericalOperands(a, b);\n\t\t\t\treturn a < b;\n\t\t\t},\n\t\t\tidentity: true,\n\t\t\tsymbol: \"<\"\n\t\t},\n\t\t\"gte\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => {\n\t\t\t\t[a, b] = Mavo.Script.getNumericalOperands(a, b);\n\t\t\t\treturn a >= b;\n\t\t\t},\n\t\t\tidentity: true,\n\t\t\tsymbol: \">=\"\n\t\t},\n\t\t\"gt\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => {\n\t\t\t\t[a, b] = Mavo.Script.getNumericalOperands(a, b);\n\t\t\t\treturn a > b;\n\t\t\t},\n\t\t\tidentity: true,\n\t\t\tsymbol: \">\"\n\t\t},\n\t\t\"eq\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => a == b,\n\t\t\tsymbol: [\"=\", \"==\"],\n\t\t\tidentity: true\n\t\t},\n\t\t\"neq\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => a != b,\n\t\t\tsymbol: [\"!=\"],\n\t\t\tidentity: true\n\t\t},\n\t\t\"and\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => !!a && !!b,\n\t\t\tidentity: true,\n\t\t\tsymbol: \"&&\"\n\t\t},\n\t\t\"or\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => !!a || !!b,\n\t\t\treduce: (p, r) => p || r,\n\t\t\tidentity: false,\n\t\t\tsymbol: \"||\"\n\t\t},\n\t\t\"concatenate\": {\n\t\t\tsymbol: \"&\",\n\t\t\tidentity: \"\",\n\t\t\tscalar: (a, b) => \"\" + a + b\n\t\t}\n\t},\n\n\tgetNumericalOperands: function(a, b) {\n\t\tif (isNaN(a) || isNaN(b)) {\n\t\t\t// Try comparing as dates\n\t\t\tvar da = new Date(a), db = new Date(b);\n\n\t\t\tif (!isNaN(da) && !isNaN(db)) {\n\t\t\t\t// Both valid dates\n\t\t\t\treturn [da, db];\n\t\t\t}\n\t\t}\n\n\t\treturn [a, b];\n\t}\n};\n\nfor (let name in Mavo.Script.operators) {\n\tlet details = Mavo.Script.operators[name];\n\n\tif (details.scalar.length < 2) {\n\t\tMavo.Script.addUnaryOperator(name, details);\n\t}\n\telse {\n\t\tMavo.Script.addBinaryOperator(name, details);\n\t}\n}\n\nvar aliases = {\n\taverage: \"avg\",\n\tiff: \"iff IF\",\n\tsubtract: \"minus\",\n\tmultiply: \"mult product\",\n\tdivide: \"div\",\n\tlt: \"lessThan smaller\",\n\tgt: \"moreThan greater greaterThan bigger\",\n\teq: \"equal equality\"\n};\n\nfor (let name in aliases) {\n\taliases[name].split(/\\s+/g).forEach(alias => _[alias] = _[name]);\n}\n\n// Make function names case insensitive\nMavo.Functions._Trap = self.Proxy? new Proxy(_, {\n\tget: (functions, property) => {\n\t\tif (property in functions) {\n\t\t\treturn functions[property];\n\t\t}\n\n\t\tvar propertyL = property.toLowerCase && property.toLowerCase();\n\n\t\tif (propertyL && functions.hasOwnProperty(propertyL)) {\n\t\t\treturn functions[propertyL];\n\t\t}\n\n\t\tif (property in Math || propertyL in Math) {\n\t\t\treturn Math[property] || Math[propertyL];\n\t\t}\n\n\t\tif (property in self) {\n\t\t\treturn self[property];\n\t\t}\n\n\t\t// Prevent undefined at all costs\n\t\treturn property;\n\t},\n\n\t// Super ugly hack, but otherwise data is not\n\t// the local variable it should be, but the string \"data\"\n\t// so all property lookups fail.\n\thas: (functions, property) => property != \"data\"\n}) : Mavo.Functions;\n\n/**\n * Private helper methods\n */\nfunction numbers(array, args) {\n\tarray = Array.isArray(array)? array : (args? $$(args) : [array]);\n\n\treturn array.filter(number => !isNaN(number) && number !== \"\").map(n => +n);\n}\n\n})();\n"],"sourceRoot":"/source/"}