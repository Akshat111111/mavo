{"version":3,"sources":["functions.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","numbers","array","args","$$","filter","number","isNaN","map","n","operator","name","op","o","arguments","undefined","operand","symbol","_","operators","_len","operands","_key","concat","identity","reduce","a","b","slice","Mavo","Functions","=","sum","prev","current","average","min","Math","apply","max","count","toArray","round","num","decimals","isFinite","toLocaleString","useGrouping","maximumFractionDigits","iff","condition","iftrue","iffalse","c","ret","aliases","subtract","multiply","divide","lt","gt","eq","_loop","split","forEach","alias","_Trap","self","Proxy","get","functions","property","propertyL","toLowerCase","hasOwnProperty","has"],"mappings":"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","file":"mavo.min.js","sourcesContent":["/**\n * Functions available inside Mavo expressions\n */\n\n(function() {\n\nvar _ = Mavo.Functions = {\n\toperators: {\n\t\t\"=\": \"eq\"\n\t},\n\n\t/**\n\t * Aggregate sum\n\t */\n\tsum: function(array) {\n\t\treturn numbers(array, arguments).reduce((prev, current) => {\n\t\t\treturn +prev + (+current || 0);\n\t\t}, 0);\n\t},\n\n\t/**\n\t * Average of an array of numbers\n\t */\n\taverage: function(array) {\n\t\tarray = numbers(array, arguments);\n\n\t\treturn array.length && _.sum(array) / array.length;\n\t},\n\n\t/**\n\t * Min of an array of numbers\n\t */\n\tmin: function(array) {\n\t\treturn Math.min(...numbers(array, arguments));\n\t},\n\n\t/**\n\t * Max of an array of numbers\n\t */\n\tmax: function(array) {\n\t\treturn Math.max(...numbers(array, arguments));\n\t},\n\n\tcount: function(array) {\n\t\treturn Mavo.toArray(array).filter(a => a !== null && a !== false).length;\n\t},\n\n\tround: function(num, decimals) {\n\t\tif (!num || !decimals || !isFinite(num)) {\n\t\t\treturn Math.round(num);\n\t\t}\n\n\t\treturn +num.toLocaleString(\"en-US\", {\n\t\t\tuseGrouping: false,\n\t\t\tmaximumFractionDigits: decimals\n\t\t});\n\t},\n\n\tiff: function(condition, iftrue, iffalse=\"\") {\n\t\tif (Array.isArray(condition)) {\n\t\t\treturn condition.map((c, i) => {\n\t\t\t\tvar ret = c? iftrue : iffalse;\n\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\treturn ret[Math.min(i, ret.length - 1)];\n\t\t\t\t}\n\n\t\t\t\treturn ret;\n\t\t\t});\n\t\t}\n\n\t\treturn condition? iftrue : iffalse;\n\t}\n};\n\n/**\n * Addition for elements and scalars.\n * Addition between arrays happens element-wise.\n * Addition between scalars returns their scalar sum (same as +)\n * Addition between a scalar and an array will result in the scalar being added to every array element.\n * Ordered by precedence (higher to lower)\n */\noperator(\"not\", a => a => !a);\noperator(\"multiply\", (a, b) => a * b, {identity: 1, symbol: \"*\"});\noperator(\"divide\", (a, b) => a / b, {identity: 1, symbol: \"/\"});\noperator(\"add\", (a, b) => +a + +b, {symbol: \"+\"});\noperator(\"subtract\", (a, b) => a - b, {symbol: \"-\"});\noperator(\"lte\", (a, b) => a <= b, {symbol: \"<=\"});\noperator(\"lt\", (a, b) => a < b, {symbol: \"<\"});\noperator(\"gte\", (a, b) => a >= b, {symbol: \">=\"});\noperator(\"gt\", (a, b) => a > b, {symbol: \">\"});\noperator(\"eq\", (a, b) => a == b, {symbol: \"==\"});\noperator(\"and\", (a, b) => !!a && !!b, { identity: true, symbol: \"&&\" });\noperator(\"or\", (a, b) => !!a || !!b, { identity: false, symbol: \"||\" } );\n\nvar aliases = {\n\taverage: \"avg\",\n\tiff: \"iff IF\",\n\tsubtract: \"minus\",\n\tmultiply: \"mult product\",\n\tdivide: \"div\",\n\tlt: \"lessThan smaller\",\n\tgt: \"moreThan greater greaterThan bigger\",\n\teq: \"equal equality\"\n};\n\nfor (let name in aliases) {\n\taliases[name].split(/\\s+/g).forEach(alias => _[alias] = _[name]);\n}\n\n// Make function names case insensitive\nMavo.Functions._Trap = self.Proxy? new Proxy(_, {\n\tget: (functions, property) => {\n\t\tif (property in functions) {\n\t\t\treturn functions[property];\n\t\t}\n\n\t\tvar propertyL = property.toLowerCase && property.toLowerCase();\n\n\t\tif (propertyL && functions.hasOwnProperty(propertyL)) {\n\t\t\treturn functions[propertyL];\n\t\t}\n\n\t\tif (property in Math || propertyL in Math) {\n\t\t\treturn Math[property] || Math[propertyL];\n\t\t}\n\n\t\tif (property in self) {\n\t\t\treturn self[property];\n\t\t}\n\n\t\t// Prevent undefined at all costs\n\t\treturn property;\n\t},\n\n\t// Super ugly hack, but otherwise data is not\n\t// the local variable it should be, but the string \"data\"\n\t// so all property lookups fail.\n\thas: (functions, property) => property != \"data\"\n}) : Mavo.Functions;\n\n/**\n * Private helper methods\n */\nfunction numbers(array, args) {\n\tarray = Array.isArray(array)? array : (args? $$(args) : [array]);\n\n\treturn array.filter(number => !isNaN(number)).map(n => +n);\n}\n\n/**\n * Extend a scalar operator to arrays, or arrays and scalars\n * The operation between arrays is applied element-wise.\n * The operation operation between a scalar and an array will result in\n * the operation being applied between the scalar and every array element.\n * @param op {Function} The operation between two scalars\n * @param identity The operationâ€™s identity element. Defaults to 0.\n */\nfunction operator(name, op, o = {}) {\n\tif (op.length < 2) {\n\t\t// Unary operator\n\t\treturn operand => Array.isArray(operand)? operand.map(op) : op(operand);\n\t}\n\n\tif (o.symbol) {\n\t\t_.operators[o.symbol] = name;\n\t}\n\n\treturn _[name] = function(...operands) {\n\t\tif (operands.length === 1) {\n\t\t\toperands = [...operands, o.identity];\n\t\t}\n\n\t\treturn operands.reduce((a, b) => {\n\t\t\tif (Array.isArray(b)) {\n\t\t\t\tif (typeof o.identity == \"number\") {\n\t\t\t\t\tb = numbers(b);\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(a)) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...b.map((n, i) => op(a[i] === undefined? o.identity : a[i], n)),\n\t\t\t\t\t\t...a.slice(b.length)\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn b.map(n => op(a, n));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Operand is scalar\n\t\t\t\tif (typeof o.identity == \"number\") {\n\t\t\t\t\tb = +b;\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(a)) {\n\t\t\t\t\treturn a.map(n => op(n, b));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn op(a, b);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n}\n\n})();\n"],"sourceRoot":"/source/"}