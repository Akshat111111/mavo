{"version":3,"sources":["functions.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","Object","TypeError","numbers","array","args","$$","filter","number","isNaN","map","n","_","Mavo","Functions","operators","=","now","Date","sum","arguments","reduce","prev","current","average","min","Math","apply","max","count","toArray","a","round","num","decimals","isFinite","toLocaleString","useGrouping","maximumFractionDigits","iff","condition","iftrue","iffalse","c","ret","idify","readable","text","replace","toLowerCase","uppercase","str","toUpperCase","lowercase","Script","addUnaryOperator","name","o","operand","scalar","addBinaryOperator","symbol","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","symbols","identity","_len","operands","_key","concat","result","logical","_loop","b","slice","getOperatorName","op","not","multiply","divide","add","subtract","lte","_Mavo$Script$getNumer","getNumericalOperands","_Mavo$Script$getNumer2","lt","_Mavo$Script$getNumer3","_Mavo$Script$getNumer4","gte","_Mavo$Script$getNumer5","_Mavo$Script$getNumer6","gt","_Mavo$Script$getNumer7","_Mavo$Script$getNumer8","eq","neq","and","or","p","r","da","db","details","aliases","_loop2","_name","split","forEach","alias","_Trap","self","Proxy","get","functions","property","propertyL","hasOwnProperty","has"],"mappings":"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","file":"mavo.min.js","sourcesContent":["/**\n * Functions available inside Mavo expressions\n */\n\n(function() {\n\nvar _ = Mavo.Functions = {\n\toperators: {\n\t\t\"=\": \"eq\"\n\t},\n\n\tget now() {\n\t\treturn new Date();\n\t},\n\n\t/**\n\t * Aggregate sum\n\t */\n\tsum: function(array) {\n\t\treturn numbers(array, arguments).reduce((prev, current) => {\n\t\t\treturn +prev + (+current || 0);\n\t\t}, 0);\n\t},\n\n\t/**\n\t * Average of an array of numbers\n\t */\n\taverage: function(array) {\n\t\tarray = numbers(array, arguments);\n\n\t\treturn array.length && _.sum(array) / array.length;\n\t},\n\n\t/**\n\t * Min of an array of numbers\n\t */\n\tmin: function(array) {\n\t\treturn Math.min(...numbers(array, arguments));\n\t},\n\n\t/**\n\t * Max of an array of numbers\n\t */\n\tmax: function(array) {\n\t\treturn Math.max(...numbers(array, arguments));\n\t},\n\n\tcount: function(array) {\n\t\treturn Mavo.toArray(array).filter(a => a !== null && a !== false && a !== \"\").length;\n\t},\n\n\tround: function(num, decimals) {\n\t\tif (!num || !decimals || !isFinite(num)) {\n\t\t\treturn Math.round(num);\n\t\t}\n\n\t\treturn +num.toLocaleString(\"en-US\", {\n\t\t\tuseGrouping: false,\n\t\t\tmaximumFractionDigits: decimals\n\t\t});\n\t},\n\n\tiff: function(condition, iftrue, iffalse=\"\") {\n\t\tif (Array.isArray(condition)) {\n\t\t\treturn condition.map((c, i) => {\n\t\t\t\tvar ret = c? iftrue : iffalse;\n\n\t\t\t\tif (Array.isArray(ret)) {\n\t\t\t\t\treturn ret[Math.min(i, ret.length - 1)];\n\t\t\t\t}\n\n\t\t\t\treturn ret;\n\t\t\t});\n\t\t}\n\n\t\treturn condition? iftrue : iffalse;\n\t},\n\n\tidify: readable => ((text || \"\") + \"\")\n\t\t.replace(/\\s+/g, \"-\") // Convert whitespace to hyphens\n\t\t.replace(/[^\\w-]/g, \"\") // Remove weird characters\n\t\t.toLowerCase(),\n\n\tuppercase: str => (str + \"\").toUpperCase(),\n\tlowercase: str => (str + \"\").toLowerCase(),\n};\n\nMavo.Script = {\n\taddUnaryOperator: function(name, o) {\n\t\treturn operand => Array.isArray(operand)? operand.map(o.scalar) : o.scalar(operand);\n\t},\n\n\t/**\n\t * Extend a scalar operator to arrays, or arrays and scalars\n\t * The operation between arrays is applied element-wise.\n\t * The operation operation between a scalar and an array will result in\n\t * the operation being applied between the scalar and every array element.\n\t */\n\taddBinaryOperator: function(name, o) {\n\t\tif (o.symbol) {\n\t\t\t// Build map of symbols to function names for easy rewriting\n\t\t\tfor (let symbol of Mavo.toArray(o.symbol)) {\n\t\t\t\tMavo.Script.symbols[symbol] = name;\n\t\t\t}\n\t\t}\n\n\t\to.identity = o.identity === undefined? 0 : o.identity;\n\n\t\treturn _[name] = function(...operands) {\n\t\t\tif (operands.length === 1) {\n\t\t\t\tif (Array.isArray(operands[0])) {\n\t\t\t\t\t// Operand is an array of operands, expand it out\n\t\t\t\t\toperands = [...operands[0]];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar prev = o.logical? o.identity : operands[0], result;\n\n\t\t\tfor (let i = 1; i < operands.length; i++) {\n\t\t\t\tlet a = o.logical? operands[i - 1] : prev;\n\t\t\t\tlet b = operands[i];\n\n\t\t\t\tif (Array.isArray(b)) {\n\t\t\t\t\tif (typeof o.identity == \"number\") {\n\t\t\t\t\t\tb = numbers(b);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Array.isArray(a)) {\n\t\t\t\t\t\tresult = [\n\t\t\t\t\t\t\t...b.map((n, i) => o.scalar(a[i] === undefined? o.identity : a[i], n)),\n\t\t\t\t\t\t\t...a.slice(b.length)\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresult = b.map(n => o.scalar(a, n));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Operand is scalar\n\t\t\t\t\tif (typeof o.identity == \"number\") {\n\t\t\t\t\t\tb = +b;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Array.isArray(a)) {\n\t\t\t\t\t\tresult = a.map(n => o.scalar(n, b));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresult = o.scalar(a, b);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (o.logical) {\n\t\t\t\t\tif (o.reduce) {\n\t\t\t\t\t\tprev = o.reduce(prev, result);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tprev = prev && result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprev = result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn prev;\n\t\t};\n\t},\n\n\t/**\n\t * Mapping of operator symbols to function name.\n\t * Populated via addOperator() and addLogicalOperator()\n\t */\n\tsymbols: {},\n\n\tgetOperatorName: op => Mavo.Script.symbols[op] || op,\n\n\t/**\n\t * Operations for elements and scalars.\n\t * Operations between arrays happen element-wise.\n\t * Operations between a scalar and an array will result in the operation being performed between the scalar and every array element.\n\t * Ordered by precedence (higher to lower)\n\t * @param scalar {Function} The operation between two scalars\n\t * @param identity The operation’s identity element. Defaults to 0.\n\t */\n\toperators: {\n\t\t\"not\": {\n\t\t\tscalar: a => a => !a\n\t\t},\n\t\t\"multiply\": {\n\t\t\tscalar: (a, b) => a * b,\n\t\t\tidentity: 1,\n\t\t\tsymbol: \"*\"\n\t\t},\n\t\t\"divide\": {\n\t\t\tscalar: (a, b) => a / b,\n\t\t\tidentity: 1,\n\t\t\tsymbol: \"/\"\n\t\t},\n\t\t\"add\": {\n\t\t\tscalar: (a, b) => +a + +b,\n\t\t\tsymbol: \"+\"\n\t\t},\n\t\t\"subtract\": {\n\t\t\tscalar: (a, b) => a - b,\n\t\t\tsymbol: \"-\"\n\t\t},\n\n\t\t\"lte\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => {\n\t\t\t\t[a, b] = Mavo.Script.getNumericalOperands(a, b);\n\t\t\t\treturn a <= b;\n\t\t\t},\n\t\t\tidentity: true,\n\t\t\tsymbol: \"<=\"\n\t\t},\n\t\t\"lt\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => {\n\t\t\t\t[a, b] = Mavo.Script.getNumericalOperands(a, b);\n\t\t\t\treturn a < b;\n\t\t\t},\n\t\t\tidentity: true,\n\t\t\tsymbol: \"<\"\n\t\t},\n\t\t\"gte\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => {\n\t\t\t\t[a, b] = Mavo.Script.getNumericalOperands(a, b);\n\t\t\t\treturn a >= b;\n\t\t\t},\n\t\t\tidentity: true,\n\t\t\tsymbol: \">=\"\n\t\t},\n\t\t\"gt\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => {\n\t\t\t\t[a, b] = Mavo.Script.getNumericalOperands(a, b);\n\t\t\t\treturn a > b;\n\t\t\t},\n\t\t\tidentity: true,\n\t\t\tsymbol: \">\"\n\t\t},\n\t\t\"eq\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => a == b,\n\t\t\tsymbol: [\"=\", \"==\"],\n\t\t\tidentity: true\n\t\t},\n\t\t\"neq\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => a != b,\n\t\t\tsymbol: [\"!=\"],\n\t\t\tidentity: true\n\t\t},\n\t\t\"and\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => !!a && !!b,\n\t\t\tidentity: true,\n\t\t\tsymbol: \"&&\"\n\t\t},\n\t\t\"or\": {\n\t\t\tlogical: true,\n\t\t\tscalar: (a, b) => !!a || !!b,\n\t\t\treduce: (p, r) => p || r,\n\t\t\tidentity: false,\n\t\t\tsymbol: \"||\"\n\t\t}\n\t},\n\n\tgetNumericalOperands: function(a, b) {\n\t\tif (isNaN(a) || isNaN(b)) {\n\t\t\t// Try comparing as dates\n\t\t\tvar da = new Date(a), db = new Date(b);\n\n\t\t\tif (!isNaN(da) && !isNaN(db)) {\n\t\t\t\t// Both valid dates\n\t\t\t\treturn [da, db];\n\t\t\t}\n\t\t}\n\n\t\treturn [a, b];\n\t}\n};\n\nfor (let name in Mavo.Script.operators) {\n\tlet details = Mavo.Script.operators[name];\n\n\tif (details.scalar.length < 2) {\n\t\tMavo.Script.addUnaryOperator(name, details);\n\t}\n\telse {\n\t\tMavo.Script.addBinaryOperator(name, details);\n\t}\n}\n\nvar aliases = {\n\taverage: \"avg\",\n\tiff: \"iff IF\",\n\tsubtract: \"minus\",\n\tmultiply: \"mult product\",\n\tdivide: \"div\",\n\tlt: \"lessThan smaller\",\n\tgt: \"moreThan greater greaterThan bigger\",\n\teq: \"equal equality\"\n};\n\nfor (let name in aliases) {\n\taliases[name].split(/\\s+/g).forEach(alias => _[alias] = _[name]);\n}\n\n// Make function names case insensitive\nMavo.Functions._Trap = self.Proxy? new Proxy(_, {\n\tget: (functions, property) => {\n\t\tif (property in functions) {\n\t\t\treturn functions[property];\n\t\t}\n\n\t\tvar propertyL = property.toLowerCase && property.toLowerCase();\n\n\t\tif (propertyL && functions.hasOwnProperty(propertyL)) {\n\t\t\treturn functions[propertyL];\n\t\t}\n\n\t\tif (property in Math || propertyL in Math) {\n\t\t\treturn Math[property] || Math[propertyL];\n\t\t}\n\n\t\tif (property in self) {\n\t\t\treturn self[property];\n\t\t}\n\n\t\t// Prevent undefined at all costs\n\t\treturn property;\n\t},\n\n\t// Super ugly hack, but otherwise data is not\n\t// the local variable it should be, but the string \"data\"\n\t// so all property lookups fail.\n\thas: (functions, property) => property != \"data\"\n}) : Mavo.Functions;\n\n/**\n * Private helper methods\n */\nfunction numbers(array, args) {\n\tarray = Array.isArray(array)? array : (args? $$(args) : [array]);\n\n\treturn array.filter(number => !isNaN(number) && number !== \"\").map(n => +n);\n}\n\n})();\n"],"sourceRoot":"/source/"}