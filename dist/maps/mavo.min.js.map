{"version":3,"sources":["expressiontext.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","$","_","Mavo","Expression","Text","Class","constructor","o","arguments","undefined","this","template","_arr","_i","prop","node","path","reduce","index","childNodes","group","element","attribute","hooks","run","expression","nodeType","parentNode","children","normalize","getAttribute","trim","firstChild","whitespace","textContent","match","splitText","after","lastChild","insertBefore","parsed","syntax","tokenize","elements","set","concat","get","update","_this","data","ret","value","map","expr","env","context","eval","Error","fallback","presentational","join","Primitive","formatNumber","primitive","datatype","setValue","static","WeakMap","search","all","filter","et","Bliss"],"mappings":"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","file":"mavo.min.js","sourcesContent":["(function($) {\n\nvar _ = Mavo.Expression.Text = $.Class({\n\tconstructor: function(o = {}) {\n\t\tthis.template = o.template && o.template.template || o.template;\n\n\t\tfor (let prop of [\"group\", \"path\", \"syntax\", \"fallback\", \"attribute\"]) {\n\t\t\tthis[prop] = o[prop] === undefined && this.template? this.template[prop] : o[prop];\n\t\t}\n\n\t\tthis.node = o.node;\n\n\t\tif (!this.node) {\n\t\t\t// No node provided, figure it out from path\n\t\t\tthis.node = this.path.reduce((node, index) => {\n\t\t\t\treturn node.childNodes[index];\n\t\t\t}, this.group.element);\n\t\t}\n\n\t\tthis.element = this.node;\n\t\tthis.attribute = this.attribute || null;\n\n\t\tMavo.hooks.run(\"expressiontext-init-start\", this);\n\n\t\tif (!this.expression) { // Still unhandled?\n\t\t\tif (this.node.nodeType === 3) {\n\t\t\t\tthis.element = this.node.parentNode;\n\n\t\t\t\t// If no element siblings make this.node the element, which is more robust\n\t\t\t\t// Same if attribute, there are no attributes on a text node!\n\t\t\t\tif (!this.node.parentNode.children.length || this.attribute) {\n\t\t\t\t\tthis.node = this.element;\n\t\t\t\t\tthis.element.normalize();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.attribute) {\n\t\t\t\tthis.expression = this.node.getAttribute(this.attribute).trim();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Move whitespace outside to prevent it from messing with types\n\t\t\t\tthis.node.normalize();\n\n\t\t\t\tif (this.node.firstChild && this.node.childNodes.length === 1 && this.node.firstChild.nodeType === 3) {\n\t\t\t\t\tvar whitespace = this.node.firstChild.textContent.match(/^\\s*|\\s*$/g);\n\n\t\t\t\t\tif (whitespace[1]) {\n\t\t\t\t\t\tthis.node.firstChild.splitText(this.node.firstChild.textContent.length - whitespace[1].length);\n\t\t\t\t\t\t$.after(this.node.lastChild, this.node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (whitespace[0]) {\n\t\t\t\t\t\tthis.node.firstChild.splitText(whitespace[0].length);\n\t\t\t\t\t\tthis.node.parentNode.insertBefore(this.node.firstChild, this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.expression = this.node.textContent;\n\t\t\t}\n\n\n\t\t\tthis.parsed = o.template? o.template.parsed : this.syntax.tokenize(this.expression);\n\t\t}\n\n\t\tMavo.hooks.run(\"expressiontext-init-end\", this);\n\n\t\t_.elements.set(this.element, [...(_.elements.get(this.element) || []), this]);\n\t},\n\n\tupdate: function(data = this.data) {\n\t\tthis.data = data;\n\n\t\tvar ret = {};\n\n\t\tMavo.hooks.run(\"expressiontext-update-start\", this);\n\n\t\tret.value = this.value = this.parsed.map(expr => {\n\t\t\tif (expr instanceof Mavo.Expression) {\n\t\t\t\tvar env = {context: this, expr};\n\n\t\t\t\tMavo.hooks.run(\"expressiontext-update-beforeeval\", env);\n\n\t\t\t\tenv.value = env.expr.eval(data);\n\n\t\t\t\tMavo.hooks.run(\"expressiontext-update-aftereval\", env);\n\n\t\t\t\tif (env.value instanceof Error) {\n\t\t\t\t\treturn this.fallback !== undefined? this.fallback : env.expr.expression;\n\t\t\t\t}\n\t\t\t\tif (env.value === undefined || env.value === null) {\n\t\t\t\t\t// Donâ€™t print things like \"undefined\" or \"null\"\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\n\t\t\t\treturn env.value;\n\t\t\t}\n\n\t\t\treturn expr;\n\t\t});\n\n\t\tif (!this.attribute) {\n\t\t\t// Separate presentational & actual values only apply when content is variable\n\t\t\tret.presentational = this.value.map(value => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\treturn value.join(\", \");\n\t\t\t\t}\n\n\t\t\t\tif (typeof value == \"number\") {\n\t\t\t\t\treturn Mavo.Primitive.formatNumber(value);\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tret.presentational = ret.presentational.length === 1? ret.presentational[0] : ret.presentational.join(\"\");\n\t\t}\n\n\t\tret.value = ret.value.length === 1? ret.value[0] : ret.value.join(\"\");\n\n\t\tif (this.primitive && this.parsed.length === 1) {\n\t\t\tif (typeof ret.value === \"number\") {\n\t\t\t\tthis.primitive.datatype = \"number\";\n\t\t\t}\n\t\t\telse if (typeof ret.value === \"boolean\") {\n\t\t\t\tthis.primitive.datatype = \"boolean\";\n\t\t\t}\n\t\t}\n\n\t\tif (ret.presentational === ret.value) {\n\t\t\tret = ret.value;\n\t\t}\n\n\t\tif (this.primitive) {\n\t\t\tthis.primitive.value = ret;\n\t\t}\n\t\telse {\n\t\t\tMavo.Primitive.setValue(this.node, ret, {attribute: this.attribute});\n\t\t}\n\n\t\tMavo.hooks.run(\"expressiontext-update-end\", this);\n\t},\n\n\tstatic: {\n\t\telements: new WeakMap(),\n\n\t\t/**\n\t\t * Search for Mavo.Expression.Text object(s) associated with a given element\n\t\t * and optionally an attribute.\n\t\t *\n\t\t * @return If one argument, array of matching Expression.Text objects.\n\t\t *         If two arguments, the matching Expression.Text object or null\n\t\t */\n\t\tsearch: function(element, attribute) {\n\t\t\tvar all = _.elements.get(element) || [];\n\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tif (!all.length) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn all.filter(et => et.attribute === attribute)[0] || null;\n\t\t\t}\n\n\t\t\treturn all;\n\t\t}\n\t}\n});\n\n})(Bliss);\n"],"sourceRoot":"/source/"}