$primitive: "[itemprop]:not([itemscope]), [property]:not([typeof])";
$font-sans: 'Helvetica Neue', sans-serif;
$font-mono: Consolas, Monaco, monospace;

@mixin highlight($color, $important: "") {
	box-shadow: 0 0 0 50vmax $color inset #{$important};
}

%rubbish-bin {
	&::before {
		content: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 100 125" fill="rgb(200,0,0)">
			<path d="M65,15.437V8c0-3.86-3.141-7-7-7H42c-3.86,0-7,3.14-7,7v7.437C14.017,16.816,14,21,14,21v10h72V21 C86,21,85.982,16.816,65,15.437z M43,9h14v6.086C54.828,15.032,52.51,15,50,15c-2.51,0-4.828,0.032-7,0.086V9z"/>
			<path d="M19,37l6,62h50l6-62H19z M35.167,88.995C35.11,88.998,35.053,89,34.998,89c-1.581,0-2.904-1.236-2.993-2.834l-2-36  c-0.092-1.654,1.175-3.07,2.829-3.162c1.663-0.089,3.07,1.175,3.162,2.829l2,36C38.087,87.488,36.821,88.903,35.167,88.995z M53,86
					 c0,1.657-1.343,3-3,3c-1.657,0-3-1.343-3-3V50c0-1.657,1.343-3,3-3c1.657,0,3,1.343,3,3V86z M67.995,86.166  C67.906,87.764,66.583,89,65.003,89c-0.057,0-0.112-0.002-0.169-0.005c-1.654-0.092-2.921-1.507-2.829-3.161l2-36
					 c0.093-1.655,1.533-2.906,3.161-2.829c1.654,0.092,2.921,1.508,2.829,3.162L67.995,86.166z"/>
		</svg>');
		height: 1em;
	}
}

// Polyfill
[hidden] {
	display: none;
}

[data-store]:not(.mv-wrapper) {
	// Unprocessed items
	opacity: .5;
}

.mv-highlight {
	@include highlight(hsla(58, 100%, 50%, .5));
}

.mv-item-controls {
	all: initial;
	position: absolute;
	bottom: 100%;
	bottom: calc(100% - 1.1em);
	right: .1em;
	z-index: 10;
	filter: drop-shadow(0 .1em .1em rgba(0,0,0,.2));
	opacity: 0;
	pointer-events: none;
	border: solid transparent;
	border-width: .4em .5em .8em .5em;
	border-radius: 1em;
	white-space: nowrap;

	.mv-item:hover:not(.has-hovered-item) > &,
	.mv-item:not(:hover):not(.has-hovered-item) .mv-item:focus > &,
	.mv-item:not(:hover):not(.has-hovered-item) .mv-item.focus-within:not(:hover) > &,
	&:hover,
	.mv-item:not(:hover):not(.has-hovered-item) > &:focus,
	.mv-item:not(:hover):not(.has-hovered-item) > &.focus-within {
		transition: .4s opacity;
		opacity: 1;
		pointer-events: auto;
	}

	button {
		all: unset;
		display: inline-block;
		vertical-align: middle;
		padding: .2em .3em;
		min-width: 1em;
		min-height: 1em;
		border: 1px solid rgba(0,0,0, .1);
		cursor: pointer;
		background: #eee no-repeat center;
		line-height: 1;
		font-size: 120%;
		text-align: center;

		&:not(:hover):not(:focus) {
			box-shadow: 0 .4em 1em white inset;
		}

		$radius: .3em;

		&:first-child {
			border-top-left-radius: $radius;
			border-bottom-left-radius: $radius;
		}

		&:last-child {
			border-top-right-radius: $radius;
			border-bottom-right-radius: $radius;
		}

		&:not(:first-child) {
			border-left: 0;
		}
	}

	.delete {
		$color: rgb(200,0,0);
		color: $color;

		&::before {
			@extend %rubbish-bin;
			display: block;
		}

		&:hover {
			background-color: $color;
			color: white;

			&::before {
				filter: saturate(0) brightness(600%);
			}
		}
	}

	.add {
		$color: hsl(80, 80%, 40%);

		color: $color;

		&::before {
			content: "✚";
		}

		&:hover {
			background-color: $color;
			color: white;
		}
	}

	.mv-wrapper:not(.can-delete) & .delete,
	.mv-wrapper:not(.can-add) & .add {
		display: none;
	}
}

.mv-item {
	position: relative;

	&.delete-hover, // basically &:has(> .delete:hover)
	&.deleted {
		@include highlight(hsla(0,100%,50%,.2), "!important");
	}

	&.deleted button {
		display: inline-block;
		margin-left: .4em;
	}

	.mv-wrapper:not([data-editing]) &.deleted {
		display: none;
	}
}

.mv-wrapper {
	button.add {
		display: inline-block;
		vertical-align: middle;
	}

	&:not(.can-add) button.add {
		display: none;
	}

	.mv-popup {
		all: initial;
		position: absolute;
		z-index: 2;
		padding: 1em;
		border: 1px solid rgba(0,0,0,.3);
		border-radius: .4em;
		margin: .3em 0 0 -.5em;
		box-shadow: 0 .1em .3em rgba(0,0,0,.3);
		background: white;
		transform-origin: -1.4em -0.45em; // Magic numbers. No idea why.
		transition: .3s transform;

		&::before {
			content: "";
			position: absolute;
			top: -.36em;
			left: 1em;
			padding: .3em;
			border: inherit;
			border-right-width: 0;
			border-bottom-width: 0;
			background: inherit;
			transform: rotate(45deg)
		}

		&[hidden] {
			display: block;
			transform: scale(0);
		}

		input, select {
			display: block;
			font: inherit;
			min-width: 100%;
		}

		select[size] {
			border: 1px solid rgba(0,0,0,.2);
		}

		.image-popup {
			.image-preview {
				position: relative;
				display: inline-block;

				progress {
					position: absolute;
					left: 0;
					right: 0;
					bottom: 1em;
					width: 100%;

					&[value="0"],
					&[value="100"] {
						display: none;
					}
				}

				img {
 					display: block;
					max-width: 100%;
				}
			}

			.upload {
				display: block;
				margin: .8em 0;
			}

			.tip {
				font-size: 70%;
				color: gray;
			}
		}
	}

	&:not(.can-edit) {
		.edit, [data-editing], .add {
			display: none;
		}
	}

	.progress {
		margin-top: .5em;
		font-size: 80%;

		&::before {
			content: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 40 40">\
				<style>\
					@keyframes dasharray { 50% { stroke-dasharray: 0 100 100 } to { stroke-dasharray: 100 100 100 } } \
					circle { \
						fill: none; \
						stroke: currentColor; stroke-width: 8; stroke-opacity: .6; stroke-dasharray: 0 0 100; \
						animation: dasharray 2s infinite; \
					} \
				</style>\
				<circle r="16" cx="50%" cy="50%" transform="rotate(-90, 20, 20)" /></svg>');
			display: inline-block;
			vertical-align: middle;
			margin-right: .2em;
		}
	}

	&.save-hovered [property].unsaved-changes,
	&.save-hovered [typeof].unsaved-changes,
	&.revert-hovered [property].unsaved-changes,
	&.revert-hovered [typeof].unsaved-changes {
		@include highlight(hsla(180, 50%, 50%, .25), "!important");
	}

	&:not([data-editing]) {
		.empty,
		.mv-item-controls,
		button.add,
		&:not(.unsaved-changes) .save,
		&:not(.unsaved-changes) .revert,
		&:not(.unsaved-changes) .clear {
			display: none;
		}
	}

	&[data-editing] {
		.empty,
		.placeholder {
			opacity: .5;
		}

		.mv-item,
		.mv-editor {
			&:focus {
				outline: none;
			}
		}

		// Temporary, good for debugging keyboard usability
		.mv-editor:focus {
			box-shadow: 0 0 0 1px hsla(200,20%,60%,.5), 1px 1px .5em 1px rgba(0,0,0,.3) !important;
		}

		// Primitives
		#{$primitive}:not(.computed) {
			& input.mv-editor,
			& select.mv-editor,
			& textarea.mv-editor {
				all: unset;
				cursor: auto;
			}

			.mv-editor:hover {
				@include highlight(hsla(58, 100%, 50%, .2));
			}

			& textarea.mv-editor {
				display: block;
				box-sizing: border-box;
				width: 100%;
			}

			input.mv-editor {
				max-width: 100%;
			}
		}
	}
}

.mv-ui {
	a {
		color: inherit;
	}
}

.mv-bar {
	all: initial;
	display: flex;
	color: white;
	font-family: inherit;
	font-size: 1rem;
	line-height: 1.5;
	backdrop-filter: blur(3px);

	&[hidden] {
		display: none;
	}

	a {
		text-decoration: none;
	}

	&.fixed {
		position: fixed;
		z-index: 10000; // this is wrong, but must override other wrong things :(
	}

	&:not(.fixed) {
		border-radius: .3em;
		margin-bottom: 1em;
	}

	&:not(.fixed):not(.floating) {
		box-shadow: 0 0 0 1px rgba(0,0,0,.3) inset, 0 .1em .4em rgba(0, 0, 0, .3);
	}

	// Bar fixed at the top of the screen
	&:not(.floating) {
		top: 0;
		left: 0;
		right: 0;
		padding: 0 .5em 0 6em;
		background: url("logo.svg") .5em 50% / auto 50% no-repeat,
					linear-gradient(transparent, hsla(0,0%,15%,.5));
		background-color: hsla(0,0%,25%,.9);

		button, .button {
			&:enabled:hover {
				background: hsla(0,0%,100%,.2);
			}
		}
	}

	// Floating bar, intended for when there is only 1 button
	&.floating {
		top: 1em;
		right: 1em;

		&:not(:hover):not(:focus) {
			opacity: .6;
		}

		button, .button {
			border-radius: .4em;
			border: 1px solid black;
			background: rgba(0,0,0,.8);
		}

		.status {
			display: none;
		}
	}

	button, .button {
		all: unset;
		font-weight: bold;
		cursor: pointer;

		&:disabled {
			opacity: .6;
			cursor: not-allowed;
		}
	}

	& > button,
	& > .button {
		padding: .3em .6em .4em;
		border: 0;

		&::before {
			display: inline-block;
			vertical-align: -.1em;
			margin-right: .3em;
			color: white;
			opacity: .5;
			font-weight: normal;
		}

		&:enabled:hover::before {
			opacity: .8;
		}
	}

	.avatar {
		all: unset;
		display: inline-block;
		vertical-align: -.1em;
		max-height: 1em;
	}

	.edit {
		&::before {
			content: "✎";
		}

		.mv-wrapper[data-editing] & {
			background: rgba(0,0,0,.6);
			box-shadow: .2em 0 .1em -.1em black inset, -.2em 0 .1em -.1em black inset;
		}
	}

	.save {
		&::before {
			content: "✓";
		}

		&:enabled:hover {
			background: hsl(180, 50%, 50%);
		}
	}

	.revert {
		&::before {
			content: "✘";
		}

		&:enabled:hover {
			background: #c50;
		}
	}

	.clear {
		&::before {
			@extend %rubbish-bin;
			vertical-align: -.25em;
			width: .9em;
			filter: saturate(0) brightness(600%);
		}

		&:enabled:hover {
			background: #b00;
		}

		.mv-wrapper:not(.editing) & {
			display: none;
		}
	}

	.status {
		flex: 1;
		line-height: 2.4;
		margin-top: auto;
		margin-bottom: auto;

		.logout {
			vertical-align: .2em;
			border: 1px solid rgba(0,0,0,.4);
			border-radius: .3em;
			box-shadow: 0 1px hsla(0,0%,100%,.4) inset, 0 .1em .1em rgba(0,0,0,.3);
			padding: .1em .4em;
			margin: 0 0 0 .6em;
			font-size: 80%;
			line-height: 1.5;

			&:active {
				background: transparent;
				box-shadow: 0 1px .1em black inset;
			}
		}
	}

	.status:empty {
		content: "Not logged in";
	}
}

.mv-debuginfo {
	all: initial;
	font: 80% $font-sans;
	display: block;
	border: 1em solid transparent;

	&:not([open]) {
		width: fit-content;

		& > summary {
			background: hsla(0,0%,50%,.4);
			background-clip: padding-box;
		}
	}

	&[open] {

	}

	& > summary {
		display: block;
		cursor: pointer;
		padding: .3em .4em;
		transition: .4s background;
		border-radius: .3em;
	}

	& > table {
		display: table;
		border: 0;
		width: 100%;
		box-sizing: border-box;
		table-layout: fixed;
		border-spacing: 0;
		background: rgba(0,0,0,.7);
		box-shadow: 0 0 .4em black inset;

		color: white;

		thead {
			background: rgba(0,0,0,.5);
		}

		tbody tr:nth-child(odd) {
			background: rgba(0,0,0,.15);
		}

		th {
			text-align: left;
			padding: .5em;

			&:nth-child(1) {
				width: 1em;
			}

			&:nth-child(2) {
				width: 40%;
			}

			&:nth-child(3) {
				width: 30%;
			}

			&:nth-child(4) {
				width: 30%;
			}
		}

		td {
			padding: .3em .7em;
			vertical-align: top;
			line-height: 1.7;
			font-family: $font-mono;
			overflow: hidden;
			text-overflow: ellipsis;
			white-space: nowrap;

			&:nth-child(1) {
				padding: .5em;
				overflow: visible;

				&::before {
					display: block;
					border-radius: .3em;
					background: hsl(210, 50%, 55%);
					color: white;
					text-align: center;
					font: bold 80%/1.5 $font-sans;
				}
			}

			&:nth-child(2) {
				// Expression column
				position: relative;
				padding: 0 .7em;
				white-space: nowrap;
				vertical-align: middle;
				overflow: visible;

				textarea {
					all: unset;
					position: absolute;
					top: 0;
					left: 0;
					padding: .3em .7em;
					width: 100%;
					box-sizing: border-box;

					&:not(:focus) {
						max-height: 2.2em;
						max-width: 100% !important;
						overflow: hidden;

						&:hover {
							background: #333;
						}
					}

					&:focus {
						resize: horizontal;
						z-index: 10;
						background: #222;
						box-shadow: 1px 1px .3em rgba(0,0,0,.5),
						            0 0 0 1px rgba(0,0,0,.5) inset;
					}
				}
			}

			&:nth-child(4) {
				// Element column
				width: 30%;
				cursor: help;

				&:hover {
					background: hsla(58, 100%, 50%, .3);
				}
			}
		}

		tr {
			&.debug-property {
				td:nth-child(1)::before {
					content: "P";
				},

				td:nth-child(2) {
					overflow: hidden;
				}
			}

			&.debug-expression {
				td:nth-child(1)::before {
					content: "=";
					background: hsl(30, 80%, 50%);
				}
			}

			&.debug-warning {
				td:nth-child(1)::before {
					content: "!";
					background: hsl(10, 90%, 50%);
				}

				td:nth-child(2) {
					overflow: hidden;
					font-family: $font-sans;
					color: #f88;
					font-weight: bold;
				}
			}
		}

		.error {
			color: #f88;
			font-weight: normal;
			font-family: $font-sans;

			.type {
				display: block;
				font-size: 80%;
				font-weight: bold;
				line-height: inherit;

				&::after {
					content: "😳";
					display: inline-block;
					vertical-align: middle;
					margin-left: .3em;
					font: 150%/.8 sans-serif;
				}
			}
		}
	}
}

.mv-debug-storage {
	display: block;
	background: hsla(0,0,0%,.8);
	color: white;
	margin: 1em 0;
	text-align: left;
	font-size: 80%;

	summary {
		cursor: pointer;
		padding: .4em .5em;
	}

	pre {
		padding: .6em;
		font: 100%/1.5 $font-mono;
		tab-size: 4;
		overflow: auto;

		&:empty::before {
			content: "(Empty)";
			font-style: italic;
			opacity: .5;
		}
	}

	table {
		border-collapse: collapse;
		width: 100%;

		th, td {
			padding: .4em;
			border: 1px solid hsla(0,0%,100%,.2);
			vertical-align: top;
		}

		td {
			white-space: nowrap;
		},

		th {
			text-align: left;
		}

		thead th {
			font-family: $font-sans;
		}

		&.list > thead th {
			background: #6DBD2A;
		}

		&.object > thead th {
			background: #1F96CF;
		}

		&.date > thead th {
			background: #A725D8;
		}
	}
}
